---
# defaults file for ansible-nginx-docker-compose

# Directory for config files used by docker-compose
nginxdc_compose_cfg_dir: "/etc/compose/nginx"

# Directory for external volumes 
nginxdc_compose_data_dir: "/var/compose/nginx"

# template for /etc/nginx/nginx.conf
# (to override, use a file with a different path/name, target will 
#  always be /etc/nginx/nginx.conf in the nginx container)
nginxdc_nginx_conf_template: "nginx/nginx.conf"

# site template(s) for /etc/nginx.d/
# Default template is set up to use self-signed certificates
# (to override, use a list of files with different path/names, target
#  files will be copied to /etc/nginx/nginx.d/ using the basename )
nginxdc_nginx_conf_d_templates:
    - "nginx/conf.d/default-tls-selfsigned.conf"

# docker external volumes used by containers
# (this variable normally does not require to be changed)
#     name: volume name
#     path_h: volume path in host
#     path_c: volume path in container
nginxdc_ext_volumes:
  # nginx web root (certbot will put LE challenge responses here)
  - name: "nginx_var_www_html"
    path_h: "{{ nginxdc_compose_data_dir }}/var_www_html"
    path_c: "/var/www/html"
  # directory to put stuff generated by openssl (selfsigned certs, dhparams)
  # (generated by openssl in certbot container)
  - name: "nginx_etc_ssl_sslgen"
    path_h: "{{ nginxdc_compose_data_dir }}/etc_ssl_sslgen"
    path_c: "/etc/ssl/sslgen"
  # certbot config dir
  - name: "nginx_etc_letsencrypt"
    path_h: "{{ nginxdc_compose_data_dir }}/etc_letsencrypt"
    path_c: "/etc/letsencrypt"
  # certbot work dir
  - name: "nginx_var_lib_letsencrypt"
    path_h: "{{ nginxdc_compose_data_dir }}/var_lib_letsencrypt"
    path_c: "/var/lib/letsencrypt"

## Let's Encrypt (LE) related configuration

# set to yes to configure nginx for Let's Encrypt
#   (requires DNS entries for the server are set up beforehand) 
#   default is no (deploy and use self-signed cert only)
nginxdc_le_enable: no

# check if cert exists before running certbot
#   - no(default): check for existing LE cert file,
#         if it exists will not run certbot
#   - yes: won't check for existing cert, 
#         will run certbot with --force-renewal option
nginxdc_le_overwrite_existing_cert: no

# temporal site template used to obtain LE certs
# (this variable normally does not require to be changed)
nginxdc_nginx_conf_d_temp_templates:
  - "nginx/conf.d/default-tls-selfsigned.conf"

# use certbot's --staging option (LE staging server)
nginxdc_le_staging: no

# use certbot's --break-my-certs option
nginxdc_le_break_my_certs: no

# list of domains from which to obtain LE certs
# (no default provided, assign a value in playbook/host_vars if using LE)
# Example:
# nginxdc_le_domains:
#    - www.example.com
#    - example.com

# e-mail used for LE registration
# (no default provided, assign a value in playbook/host_vars if using LE)
# Example:
# nginxdc_le_email: myemail@example.com

# in addition to the variables above, if using LE, 
# set nginxdc_nginx_conf_d_templates and related template variables
# appropriately, for example:
# nginxdc_nginx_conf_d_templates:
#   - "nginx/conf.d/default-tls.conf"
# nginxdc_nginx_template_default_ssl_cert : "/etc/letsencrypt/live/example.com/fullchain.pem"
# nginxdc_nginx_template_default_ssl_cert_key : "/etc/letsencrypt/live/example.com/privkey.pem"
