---
# tasks file for ansible-nginx-docker-compose

- name: "Install dependencies required by this role"
  package:
    name: "{{ item }}"
  loop:
    - docker
    - docker-compose

- name: "Create directories in host for config files"
  file:
    name: "{{ nginxdc_compose_cfg_dir }}/{{ item }}"
    state: directory
  loop:
        - "nginx/conf.d"

# This will create a dict from nginxdc_ext_volumes
# so that we can get elements using the volume name as a key
# e.g. to get the host path: 
#  nginxdc_fact_vol_dict['nginx_var_www_html']['path_h']
- name: "Create dict from nginxdc_ext_volumes"
  set_fact:
    nginxdc_fact_vol_dict: "{{ nginxdc_fact_vol_dict|default({}) | combine( {item.name: {'path_c':item.path_c, 'path_h':item.path_h} } ) }}"
  loop: "{{ nginxdc_ext_volumes }}"
  tags:
    - nginxdc-compose-cfg
    - nginxdc-volumes
    - nginxdc-selfsigned
    - nginxdc-dhparams
    - nginxdc-le

- name: "Create docker compose file from template"
  template:
    src: "docker-compose.yml.j2"
    dest: "{{ nginxdc_compose_cfg_dir }}/docker-compose.yml"
  tags: nginxdc-compose-cfg

- name: "Create nginx main configuration from template"
  template:
    src: "{{ nginxdc_nginx_conf_template }}.j2"
    dest: "{{ nginxdc_compose_cfg_dir }}/nginx/nginx.conf"
  tags: nginxdc-nginx-cfg

- name: "Disable existing nginx site config"
  block:
    - name: "Get list of existing site config files"
      find:
        paths: "{{ nginxdc_compose_cfg_dir }}/nginx/conf.d"
        patterns: "*.conf"
      register: fi

    - name: "Disable site config files (add .old and timestamp to file name)"
      command:
        cmd: "mv -v {{ item.path }} {{ item.path }}.old.{{ ansible_date_time.epoch }}"
      loop: "{{ fi.files }}"
  tags: nginxdc-nginx-site-cfg-remove

- name: "Configure volumes"
  block:
    - name: "Check if paths used for docker volume exist"
      stat:
        path: "{{ item.path_h }}"
      register: st
      loop: "{{ nginxdc_ext_volumes }}"

    - name: "Create paths used for docker volumes if needed"
      file:
        path: "{{ item.item.path_h }}"
        state: "directory"
        mode: '755'
      when: item.stat.exists is not defined or not(item.stat.exists)
      loop: "{{ st.results }}"

    # Create docker volumes as bind mounts
    # (i.e., all directories need to be created beforehand, 
    #  all  NFS/CIFS/etc volumes need to be mounted beforehand )
    - name: "Create docker volumes (bind mounts)"
      docker_volume:
        name: "{{ item.name }}"
        driver_options:
          type: "none"
          o: "bind"
          device: "{{ item.path_h }}"
      loop: "{{ nginxdc_ext_volumes }}"
  tags: nginxdc-volumes

- name: "create self signed certificate using openssl"
  shell:
    cmd: |
      openssl req -x509 -nodes -newkey rsa:2014 -days 3650 \
      -keyout '{{ nginxdc_fact_vol_dict['nginx_etc_ssl_sslgen']['path_h'] }}/selfsigned-privkey.pem' \
      -out '{{ nginxdc_fact_vol_dict['nginx_etc_ssl_sslgen']['path_h'] }}/selfsigned-cert.pem' \
      -subj '/CN=localhost'
  tags: nginxdc-selfsigned

- name: "create dhparam file using openssl (takes some time)"
  shell:
    cmd: |
      /usr/bin/openssl dhparam -out {{ nginxdc_fact_vol_dict['nginx_etc_ssl_sslgen']['path_h'] }}/dhparam.pem \
      4096
    creates: "{{ nginxdc_fact_vol_dict['nginx_etc_ssl_sslgen']['path_h'] }}/dhparam.pem"
  tags: nginxdc-dhparams

- name: "Check if LE certs already exists"
  stat:
    path: "{{ nginxdc_fact_vol_dict['nginx_etc_letsencrypt']['path_h'] }}/live/{{ nginxdc_le_domains[0] }}/fullchain.pem"
  register: st_le
  when: 
    - nginxdc_le_enable | bool
  tags: nginxdc-le

- name: "certbot tasks"
  block:
    - name: "Create temporal nginx site configuration to get LE certs"
      template:
        src: "{{ item }}.j2"
        dest: "{{ nginxdc_compose_cfg_dir }}/nginx/conf.d/{{ item | basename }}"
      loop: "{{ nginxdc_nginx_conf_d_temp_templates }}"
      tags: nginxdc-nginx-temp-site-cfg

    - name: "Restart nginx"
      docker_compose:
        project_src: "{{ nginxdc_compose_cfg_dir }}"
        services: 
          - nginx
        state: present
        restarted: yes
      tags: nginxdc-compose-restart

    # run with the '--force-renewal' option to prevent certbot
    # stalling (i.e., asking for user input if a cert already exists)
    - name: "Get LE certs using certbot"
      shell:
        cmd: |
          docker-compose run --rm --entrypoint "\
          certbot certonly \
          --webroot -w {{ nginxdc_fact_vol_dict['nginx_var_www_html']['path_c'] }} \
          --email {{ nginxdc_le_email }} --no-eff-email \
          -d {{ nginxdc_le_domains|join(',') }} \
          --agree-tos \
          {{ '--staging' if (nginxdc_le_staging | bool) else '' }} \
          --force-renewal \
          {{ '--break-my-certs' if (nginxdc_le_break_my_certs | bool) else '' }}" \
          certbot
        chdir: "{{ nginxdc_compose_cfg_dir }}"

    - name: "Remove temporal nginx sites configuration"
      file:
        path: "{{ nginxdc_compose_cfg_dir }}/nginx/conf.d/{{ item | basename }}"
        state: absent
      loop: "{{ nginxdc_nginx_conf_d_temp_templates }}"
      tags: nginxdc-nginx-temp-site-cfg-remove
  when: 
    - nginxdc_le_enable | bool
    - nginxdc_le_overwrite_existing_cert or st_le.stat.exists is not defined or not(st_le.stat.exists)
  tags: nginxdc-le


- name: "Create nginx site configuration from templates"
  template:
    src: "{{ item }}.j2"
    dest: "{{ nginxdc_compose_cfg_dir }}/nginx/conf.d/{{ item | basename }}"
  loop: "{{ nginxdc_nginx_conf_d_templates }}"
  tags: nginxdc-nginx-site-cfg-create

- name: "(Re-)start all compose services"
  docker_compose:
    project_src: "{{ nginxdc_compose_cfg_dir }}"
    state: present
    restarted: yes
  tags: nginxdc-compose-restart
