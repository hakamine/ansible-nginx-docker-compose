server {
    listen 443 ssl;
    listen [::]:443 ssl;

    # self signed certificates
    ssl_certificate /etc/ssl/selfsigned/selfsigned.crt;
    ssl_certificate_key /etc/ssl/selfsigned/selfsigned.pem;

    # SSL parameters
    ssl_protocols TLSv1.2;
    ssl_prefer_server_ciphers on;
    # TBD
    # ssl_dhparam /etc/nginx/dhparam.pem;
    ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-SHA384;
    ssl_ecdh_curve secp384r1; # Requires nginx >= 1.1.0
    ssl_session_timeout  10m;
    ssl_session_cache shared:SSL:10m;
    ssl_session_tickets off; # Requires nginx >= 1.5.9
    ssl_stapling on; # Requires nginx >= 1.3.7
    ssl_stapling_verify on; # Requires nginx => 1.3.7
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    # Disable strict transport security for now. You can uncomment the following
    # line if you understand the implications.
    # add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    server_name _;

    root "/usr/share/nginx/html";
    index index.html;

    # For certbot (let's encrypt)
    location /.well-known/acme-challenge {
        allow all;
        root /var/www/html;
    }

}

server {
    listen 80;
    listen [::]:80;

    server_name _;

    # For certbot (let's encrypt)
    location /.well-known/acme-challenge {
        allow all;
        root /var/www/html;
    }

    # redirect to https
    location / {
        return 301 https://$host$request_uri;
    }
}